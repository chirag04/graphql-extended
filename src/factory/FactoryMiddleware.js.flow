/* @flow */
/**
 * Flowtype definitions for FactoryMiddlewa
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

import type {
    ObjectTypeDefinitionNode,
    InterfaceTypeDefinitionNode,
    EnumTypeDefinitionNode,
    UnionTypeDefinitionNode,
    ScalarTypeDefinitionNode,
    InputObjectTypeDefinitionNode,
} from 'graphql';
import { GraphQLSchema } from 'graphql';
import type {
    GraphQLFieldConfigExt
} from '../type/object';
import {
    SchemaFactory
} from './SchemaFactory';
/**
 * Middleware is useful for manipulating how the SchemaFactory creates a schema.
 * Usage:
  - Provide a class that extends the FactoryMiddleware class to the SchemaFactory.
  - This is implemented as a class instead of an interface so that it can default
    middleware methods to the identity function.
*/
declare export class FactoryMiddleware {

    /**
     * This is called directly before the schema attempts to build and
     * provides an opportunity for any excess setup.
    For example, you might add any default types, interfaces, etc.
     * @param _factory The factory instance calling the middleware
    */
    beforeBuild(_factory: SchemaFactory): void;

    /**
     * This is called directly after the schema is built and
     * provides an opportunity for any last second changes.
     * @param schema The GraphQL schema
     */
    afterBuild(schema: GraphQLSchema): GraphQLSchema;

    /**
     * Allows you to wrap an object type field. Useful for wrapping resolvers
     * @param field The field config. This field may already contain a resolver that was pulled
    from the factories resolver cache. You can choose to override or compose them.
    */
    wrapObjectField(
        _factory: SchemaFactory,
        _definition: ObjectTypeDefinitionNode,
        field: GraphQLFieldConfigExt<mixed, mixed>): GraphQLFieldConfigExt<mixed, mixed>;

    /**
     * Allows you to wrap an interface type field.
     * @param field The field config. This field may already contain a resolver that was pulled
    from the factories resolver cache. You can choose to override or compose them.
    */
    wrapInterfaceField(
        _factory: SchemaFactory,
        _definition: InterfaceTypeDefinitionNode,
        field: GraphQLFieldConfigExt<mixed, mixed>): GraphQLFieldConfigExt<mixed, mixed>;

    /**
     * Executed before the schema is built. This is useful for manipulating the
     * AST nodes before they are converted into GraphQL types. Middleware is
    restricted to work on AST nodes instead of types. This is because type members
    are often thunks and it can introduce problems to try to resolve them out of order.
     * @param nodeMap And ImmutableJS Map containing the AST definition nodes.
     * @return  The augmented nodeMap
    */
    wrapObjectNode(
        _factory: SchemaFactory,
        definition: ObjectTypeDefinitionNode): ObjectTypeDefinitionNode;

    /**
     * Wrap an interface or interact with the factory.
     */
    wrapInterfaceNode(
        _factory: SchemaFactory,
        definition: InterfaceTypeDefinitionNode): InterfaceTypeDefinitionNode;

    /**
     * Wrap an enum or interact with the factory.
     */
    wrapEnumNode(
        _factory: SchemaFactory,
        definition: EnumTypeDefinitionNode): EnumTypeDefinitionNode;

    /**
     * Wrap an union or interact with the factory.
     */
    wrapUnionNode(
        _factory: SchemaFactory,
        definition: UnionTypeDefinitionNode): UnionTypeDefinitionNode;

    /**
     * Wrap an scalar or interact with the factory.
     */
    wrapScalarNode(
        _factory: SchemaFactory,
        definition: ScalarTypeDefinitionNode): ScalarTypeDefinitionNode;

    /**
     * Wrap an input or interact with the factory.
     */
    wrapInputNode(
        _factory: SchemaFactory,
        definition: InputObjectTypeDefinitionNode): InputObjectTypeDefinitionNode
}