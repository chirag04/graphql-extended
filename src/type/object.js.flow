/* @flow */
/**
 * Flowtype definitions for obje
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

declare type Thunk<T> = T | () => T

import type {
    GraphQLObjectTypeConfig,
    GraphQLFieldConfig,
    GraphQLField,
} from 'graphql/type';
import {
    GraphQLObjectType,
    GraphQLDirective,
} from 'graphql/type';
import {
    GraphQLDirectiveValue
} from './directives';
import invariant from '../jsutils/invariant';
declare function resolveThunk<T>(thunk: Thunk<T>): T;
export type GraphQLObjectTypeConfigExt<TSource, TContext> = {
    directives?: Thunk<Array<GraphQLDirectiveValue >>
} & GraphQLObjectTypeConfig<TSource, TContext>
export interface GraphQLFieldConfigMapExt<TSource, TContext>{
    [fieldName: string]: GraphQLFieldConfigExt<TSource,
    TContext >
}
export type GraphQLFieldConfigExt<TSource, TContext> = {
    directives: Array<GraphQLDirectiveValue >
} & GraphQLFieldConfig<TSource, TContext>
export type GraphQLFieldExt<TSource, TContext> = {
    directives: Array<GraphQLDirectiveValue >
} & GraphQLField<TSource, TContext>

/**
 * The schemata is an extension of a GraphQLSchema that includes extra
 * functionality to merge schemas, manage directives, and more.

Schemata Definition

A Schema is created by supplying the root types of each type of operation,
query and mutation (optional). A schema definition is then supplied to the
validator and executor.

Example:

     const MyAppSchema = new GraphQLSchema({
       query: MyAppQueryRootType,
       mutation: MyAppMutationRootType,
     })

Note: If an array of `directives` are provided to GraphQLSchema, that will be
the exact list of directives represented and allowed. If `directives` is not
provided then a default set of the specified directives (e.g. @include and
 * @skip  ) will be used. If you wish to provide *additional* directives to these
specified directives, you must explicitly declare them. Example:

const MyAppSchema = new GraphQLSchema({
  ...
  directives: specifiedDecorators.concat([ myCustomDirective ]),
})
*/
declare export class GraphQLObjectTypeExt mixins GraphQLObjectType {
    constructor(config: GraphQLObjectTypeConfigExt<mixed, mixed>): this;
    getDirectives(): Array<GraphQLDirectiveValue >
}
declare function defineDirectives(
    type: GraphQLObjectType,
    directivesThunk?: Thunk<Array<GraphQLDirectiveValue >> ): Array<GraphQLDirectiveValue>;