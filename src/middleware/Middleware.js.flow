/* @flow */
/**
 * Flowtype definitions for Middlewa
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

import {
    GraphQLExtResolveInfo
} from '../execution/GraphQLExtResolveInfo';
import {
    ExecutionContext
} from '../execution/ExecutionContext';
export interface Middleware<MiddlewareValue, FieldValue, Ctx>{

    /**
     * Runs immediately before a query is executed. Returns a MiddlewareValue that serves as
     * context for this specific middleware function.
     */
    beforeQuery(context: ExecutionContext): MiddlewareValue,

    /**
     * Runs immediately after a query is executed. mVal contains the middleware value
     * accumulated by this middleware.
     */
    afterQuery(mVal: MiddlewareValue, mctx: ExecutionContext): void,

    /**
     * Run for each field directly before field resolution.
     * @return  Returns a tuple containing a FieldValue and an optional resolution value.
    If beforeField returns a second value in the tuple, that is the result of the
    execution. This is convenient for cache checking for example.
    */
    beforeField(
        mVal: MiddlewareValue,
        eCtx: ExecutionContext,
        mCtx: ResolverContext<Ctx>): FieldValue,

    /**
     * Run for each field directly after field resolution.
     * 
    Returning a value from this method will change the output for the resolution
    */
    afterField(
        mVal: MiddlewareValue,
        fVal: FieldValue,
        value: mixed,
        eCtx: ExecutionContext,
        mCtx: ResolverContext<Ctx>): mixed
}
export interface ResolverContext<Ctx>{
    source: mixed,
    args: mixed,
    context: Ctx,
    info: GraphQLExtResolveInfo
}