/* @flow */
/**
 * Flowtype definitions for SchemaFacto
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

import invariant from '../jsutils/invariant';
import keyValMap from '../jsutils/keyValMap';
import {
    valueFromAST
} from 'graphql/utilities/valueFromAST';
import {
    getArgumentValues
} from '../execution/values';
import {
    getDescription,
    getDeprecationReason
} from '../utilities';
import {
    TypeResolverMap,
    FieldResolverMap,
    ScalarResolverMap
} from '../utilities/ResolverMap';
import {
    FactoryMiddleware
} from './FactoryMiddleware';
import {
    Map
} from 'immutable';
import {
    GraphQLFieldResolver,
    parse,
    Kind
} from 'graphql';
import {
    LIST_TYPE,
    NON_NULL_TYPE,
    SCALAR_TYPE_DEFINITION,
    OBJECT_TYPE_DEFINITION,
    INTERFACE_TYPE_DEFINITION,
    ENUM_TYPE_DEFINITION,
    UNION_TYPE_DEFINITION,
    INPUT_OBJECT_TYPE_DEFINITION,
    SCHEMA_DEFINITION,
    DIRECTIVE_DEFINITION
} from 'graphql/language/kinds';
import {
    DirectiveNode,
    TypeNode,
    NamedTypeNode,
    SchemaDefinitionNode,
    TypeDefinitionNode,
    ScalarTypeDefinitionNode,
    ObjectTypeDefinitionNode,
    InputValueDefinitionNode,
    InterfaceTypeDefinitionNode,
    UnionTypeDefinitionNode,
    EnumTypeDefinitionNode,
    InputObjectTypeDefinitionNode,
    DirectiveDefinitionNode,
    FieldDefinitionNode
} from 'graphql/language/ast';
import {
    GraphQLSchema
} from 'graphql/type/schema';
import {
    GraphQLString,
    GraphQLInt,
    GraphQLFloat,
    GraphQLBoolean,
    GraphQLID
} from 'graphql/type/scalars';
import {
    GraphQLType,
    GraphQLNamedType,
    GraphQLInputType,
    GraphQLOutputType,
    GraphQLInputFieldConfigMap,
    GraphQLFieldConfigArgumentMap
} from 'graphql/type/definition';
import {
    GraphQLFieldConfigMapExt,
    GraphQLFieldConfigExt
} from '../type/object';
import {
    GraphQLDirective,
    GraphQLSkipDirective,
    GraphQLIncludeDirective,
    GraphQLDeprecatedDirective
} from 'graphql/type/directives';
import {
    GraphQLDirectiveValue
} from '../type/directives';
import {
    ___Schema,
    ___Directive,
    ___DirectiveLocation,
    ___Type,
    ___Field,
    ___InputValue,
    ___EnumValue,
    ___TypeKind
} from 'graphql/type/introspection';
declare var DEFAULT_DIRECTIVES: ;
declare function buildWrappedType(innerType: GraphQLType, inputTypeNode: TypeNode): GraphQLType;
declare function getNamedTypeNode(typeNode: TypeNode): NamedTypeNode;
export interface SchemaFactoryConfig {
    middleware?: FactoryMiddleware
}
/**
 * A base class that handles managing and building GraphQL schemas
 */
declare export class SchemaFactory {
    schemaDef: SchemaDefinitionNode | null;
    typeMap: Map<string, GraphQLNamedType>;
    nodeMap: Map<string, TypeDefinitionNode>;
    resolverMap: Map<string, FieldResolverMap>;
    typeResolverMap: Map<string, GraphQLTypeResolver<mixed, mixed >> ;
    directiveMap: Map<string, GraphQLDirective>;
    scalarResolvers: Map<string, ScalarResolverMap<mixed, mixed >> ;
    constructor(config: SchemaFactoryConfig): this;
    getSchema(): GraphQLSchema;
    getType(name: string): GraphQLNamedType;

    /**
     * Add a single object type to the schema.
     * @param spec A single type declaration as GraphQL schema IDL
     * @param resolvers An object with field names for keys and GraphQLFieldResolver functions as values.
     */
    createType(spec: string, resolvers: FieldResolverMap): SchemaFactory;

    /**
     * Add a single interface type to the schema.
     * @param spec A single type declaration as GraphQL schema IDL
     * @param resolveType A GraphQLTypeResolver for the interface
     */
    createInterface(spec: string, resolveType: GraphQLTypeResolver<mixed, mixed>): SchemaFactory;

    /**
     * Add a single enum type to the schema.
     * @param spec A single type declaration as GraphQL schema IDL
     */
    createEnum(spec: string): SchemaFactory;

    /**
     * Add a single union type to the schema.
     * @param spec A single type declaration as GraphQL schema IDL
     * @param resolveType A GraphQLTypeResolver for the union
     */
    createUnion(spec: string, resolveType: GraphQLTypeResolver<mixed, mixed>): SchemaFactory;

    /**
     * Extends the factories type cache with prebuilt GraphQL types.
     * @param types 
     */
    extendWithTypes(types: Array<GraphQLNamedType>): SchemaFactory;

    /**
     * Append a GraphQL IDL document to the factory. Any type collisions are resolved
     * via the schema's CollisionResolver.
     * @param spec A GraphQL document string containing the new schema elements
     */
    extendWithSpec(spec: string, resolvers: TypeResolverMap<mixed, mixed>): SchemaFactory;

    /**
     * Protected API
     * @param directiveNode 
     */
    getDirective(directiveNode: DirectiveDefinitionNode): GraphQLDirective;
    getObjectType(typeNode: TypeDefinitionNode): GraphQLObjectType;
    produceType(typeNode: TypeNode): GraphQLType;
    produceInputType(typeNode: TypeNode): GraphQLInputType;
    produceOutputType(typeNode: TypeNode): GraphQLOutputType;
    produceObjectType(typeNode: TypeNode): GraphQLObjectType;
    produceInterfaceType(typeNode: TypeNode): GraphQLInterfaceType;
    produceDirectiveValue(directiveNode: DirectiveNode): GraphQLDirectiveValue;
    typeDefNamed(typeName: string): GraphQLNamedType;
    makeSchemaDef(
            def: TypeDefinitionNode): GraphQLObjectType |
        GraphQLInterfaceType |
        GraphQLEnumType |
        GraphQLUnionType |
        GraphQLInputObjectType |
        GraphQLScalarType;
    makeTypeDef(def: ObjectTypeDefinitionNode): GraphQLObjectType;
    getResolver(
        type: ObjectTypeDefinitionNode,
        field: FieldDefinitionNode): GraphQLFieldResolver<mixed, mixed>;
    makeObjectFieldDefMap(def: ObjectTypeDefinitionNode): GraphQLFieldConfigMapExt<mixed, mixed>;
    makeInterfaceFieldDefMap(def: InterfaceTypeDefinitionNode): GraphQLFieldConfigMapExt<mixed, mixed>;
    makeImplementedInterfaces(def: ObjectTypeDefinitionNode): Array<GraphQLInterfaceType>;
    makeDirectiveValues(
        def: ObjectTypeDefinitionNode | FieldDefinitionNode): Array<GraphQLDirectiveValue>;
    makeInputValues(values: Array<InputValueDefinitionNode>): {
        [name: string]: mixed
    };
    makeInterfaceDef(def: InterfaceTypeDefinitionNode): GraphQLInterfaceType;
    makeEnumDef(def: EnumTypeDefinitionNode): GraphQLEnumType;
    makeUnionDef(def: UnionTypeDefinitionNode): GraphQLUnionType;
    makeScalarDef(def: ScalarTypeDefinitionNode): GraphQLScalarType;
    makeInputObjectDef(def: InputObjectTypeDefinitionNode): GraphQLInputObjectType
}
declare var cannotExecuteSchema: GraphQLTypeResolver<mixed, mixed>;