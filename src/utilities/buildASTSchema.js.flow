/* @flow */
/**
 * Flowtype definitions for buildASTSche
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

import find from '../jsutils/find';
import invariant from '../jsutils/invariant';
import keyValMap from '../jsutils/keyValMap';
import {
    valueFromAST
} from 'graphql/utilities/valueFromAST';
import {
    TokenKind
} from 'graphql/language/lexer';
import {
    parse
} from 'graphql/language/parser';
import {
    Source
} from 'graphql/language/source';
import {
    getArgumentValues
} from '../execution/values';
import {
    GraphQLTypeResolver,
    GraphQLFieldResolver,
    GraphQLError
} from 'graphql';
import {
    LIST_TYPE,
    NON_NULL_TYPE,
    DOCUMENT,
    SCHEMA_DEFINITION,
    SCALAR_TYPE_DEFINITION,
    OBJECT_TYPE_DEFINITION,
    INTERFACE_TYPE_DEFINITION,
    ENUM_TYPE_DEFINITION,
    UNION_TYPE_DEFINITION,
    INPUT_OBJECT_TYPE_DEFINITION,
    DIRECTIVE_DEFINITION
} from 'graphql/language/kinds';
import {
    Location,
    DocumentNode,
    DirectiveNode,
    TypeNode,
    NamedTypeNode,
    SchemaDefinitionNode,
    TypeDefinitionNode,
    ScalarTypeDefinitionNode,
    ObjectTypeDefinitionNode,
    InputValueDefinitionNode,
    InterfaceTypeDefinitionNode,
    UnionTypeDefinitionNode,
    EnumTypeDefinitionNode,
    InputObjectTypeDefinitionNode,
    DirectiveDefinitionNode,
    FieldDefinitionNode
} from 'graphql/language/ast';
import {
    GraphQLSchema
} from 'graphql/type/schema';
import {
    GraphQLString,
    GraphQLInt,
    GraphQLFloat,
    GraphQLBoolean,
    GraphQLID
} from 'graphql/type/scalars';
import {
    GraphQLType,
    GraphQLNamedType,
    GraphQLInputType,
    GraphQLOutputType,
    GraphQLInputFieldConfigMap,
    GraphQLFieldConfigArgumentMap
} from 'graphql/type/definition';
import {
    GraphQLFieldConfigMapExt,
    GraphQLFieldConfigExt
} from '../type/object';
import {
    GraphQLDirective,
    GraphQLSkipDirective,
    GraphQLIncludeDirective,
    GraphQLDeprecatedDirective
} from 'graphql/type/directives';
import {
    GraphQLRelationDirective,
    GraphQLDirectiveValue
} from '../type/directives';
import {
    ___Schema,
    ___Directive,
    ___DirectiveLocation,
    ___Type,
    ___Field,
    ___InputValue,
    ___EnumValue,
    ___TypeKind
} from 'graphql/type/introspection';
import {
    TypeResolverMap
} from './ResolverMap';
declare function buildWrappedType(innerType: GraphQLType, inputTypeNode: TypeNode): GraphQLType;
declare function getNamedTypeNode(typeNode: TypeNode): NamedTypeNode;
/**
 * This takes the ast of a schema document produced by the parse function in
 * src/language/parser.js.

If no schema definition is provided, then it will look for types named Query
and Mutation.

Given that AST it constructs a GraphQLSchema. The resulting schema
has no resolve methods, so execution will use default resolvers.
*/
declare export function buildASTSchema(ast: DocumentNode, resolverMap: TypeResolverMap<mixed, mixed>): GraphQLSchema;
/**
 * Given a collection of directives, returns the string value for the
 * deprecation reason.
 */
declare export function getDeprecationReason(directives?: Array<DirectiveNode>): string | void;
/**
 * Given an ast node, returns its string description based on a contiguous
 * block full-line of comments preceding it.
 */
declare export function getDescription(node: {
    loc?: Location
}): string | void;
/**
 * A helper function to build a GraphQLSchema directly from a source
 * document.
 */
declare export function buildSchema(source: string | Source): GraphQLSchema;
declare function leadingSpaces(str: string): number;
declare var cannotExecuteSchema: GraphQLTypeResolver<mixed, mixed>;