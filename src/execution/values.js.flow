/* @flow */
/**
 * Flowtype definitions for valu
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

import {
    createIterator,
    isCollection
} from 'iterall';
import {
    GraphQLError
} from 'graphql/error';
import invariant from '../jsutils/invariant';
import isNullish from '../jsutils/isNullish';
import isInvalid from '../jsutils/isInvalid';
import keyMap from '../jsutils/keyMap';
import {
    typeFromAST
} from 'graphql/utilities/typeFromAST';
import {
    valueFromAST
} from 'graphql/utilities/valueFromAST';
import {
    isValidJSValue
} from 'graphql/utilities/isValidJSValue';
import {
    isValidLiteralValue
} from 'graphql/utilities/isValidLiteralValue';
import * as Kind from 'graphql/language/kinds';
import {
    print
} from 'graphql/language/printer';
import type {
    GraphQLInputType,
    GraphQLField
} from 'graphql/type/definition';
import {
    GraphQLDirective
} from 'graphql/type/directives';
import {
    GraphQLSchema
} from 'graphql/type/schema';
import type {
    FieldNode,
    DirectiveNode,
    VariableDefinitionNode
} from 'graphql/language/ast';
/**
 * Prepares an object map of variableValues of the correct type based on the
 * provided variable definitions and arbitrary input. If the input cannot be
parsed to match the variable definitions, a GraphQLError will be thrown.
*/
declare export function getVariableValues(
    schema: GraphQLSchema,
    varDefNodes: Array<VariableDefinitionNode>,
    inputs: {
        [key: string]: mixed
    }): {
    [key: string]: mixed
};
/**
 * Prepares an object map of argument values given a list of argument
 * definitions and list of argument AST nodes.
 */
declare export function getArgumentValues(
    def: GraphQLField<mixed, mixed>| GraphQLDirective,
    node: FieldNode | DirectiveNode,
    variableValues?: {
        [key: string]: mixed
    }): {
    [key: string]: mixed
};
/**
 * Given a type and any value, return a runtime value coerced to match the type.
 */
declare function coerceValue(type: GraphQLInputType, value: mixed): mixed;