/* @flow */
/**
 * Flowtype definitions for CompositeResolv
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

import {
    GraphQLFieldResolver
} from 'graphql';
declare export function compose<TSource, TOutput>(
    ...funcs: Array<ComposableResolver<TSource, TOutput >> ): ComposableResolver<TSource, TOutput>;
export type ComposableResolver<TSource, TOutput>= (
    fn: GraphQLFieldResolver<TSource, TOutput>) => GraphQLFieldResolver<TSource, TOutput>;
declare export function CompositeResolver<TSource, TOutput>(
    ...funcs: Array<ComposableResolver<TSource, TOutput >> ): (
    resolver: GraphQLFieldResolver<TSource, TOutput>) => GraphQLFieldResolver<TSource, TOutput>;