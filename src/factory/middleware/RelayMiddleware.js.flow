/* @flow */
/**
 * Flowtype definitions for RelayMiddlewa
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.2.0
 * Repo: https://github.com/scaphold-io/flowgen
 */

import {
    FactoryMiddleware
} from '../FactoryMiddleware';
import type {
    GraphQLFieldConfigExt
} from '../../type/object';
import {
    SchemaFactory
} from '../SchemaFactory';
import type {
    ObjectTypeDefinitionNode,
    GraphQLTypeResolver,
} from 'graphql';
import {
    GraphQLScalarType,
    Kind
} from 'graphql';
import type {
    GraphQLNamedOutputType,
} from '../../utilities'
import {
    implementsInterface,
    getNamedOutputType,
    isListType
} from '../../utilities';
declare function connectionSpec(def: ObjectTypeDefinitionNode): string;
/**
 * Creates Connection & Edge types for all Node implementing types. This middleware
 * also provides the Node interface, Cursor scalar type, etc.
 */
declare export class RelayMiddleware mixins FactoryMiddleware {
    constructor(resolveNode: GraphQLTypeResolver<mixed, mixed>): this;

    /**
     * Add the Node interface and PageInfo and Cursor types
     */
    beforeBuild(factory: SchemaFactory): void;

    /**
     * If the type implements Node then create connection types for it.
     */
    wrapObjectNode(
        factory: SchemaFactory,
        definition: ObjectTypeDefinitionNode): ObjectTypeDefinitionNode;

    /**
     * For each field with a Node implementing type or a wrapper of a Node implementing type
     * such as NonNull or List replace the field with a connection
     */
    wrapObjectField(
        factory: SchemaFactory,
        _definition: ObjectTypeDefinitionNode,
        field: GraphQLFieldConfigExt<mixed, mixed>): GraphQLFieldConfigExt<mixed, mixed >
}